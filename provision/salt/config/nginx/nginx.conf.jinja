# nginx.conf
#
# This is the primary configuration for nginx and is processed before
# any other individual configuration files.

# Run nginx as this user.
user    www-data;

# Default to number of CPU cores available.
worker_processes  auto;

# Set a default error log.
error_log   /var/log/nginx/error.log;

# Set the nginx process identifier.
pid     /var/run/nginx.pid;

# The EventsModule controls how nginx deals with connections.
events {
    # max clients = worker_processes (CPUs) * worker_connections
    worker_connections  2000;

    # Allow a worker to accept all current incoming connections at once.
    multi_accept on;

    # The technique through which multiple connections are handled.
    use epoll;
}

# The HttpCoreModule controls core features of Nginx's HTTP processing
http {
    # Define MIME types for files
    include      /etc/nginx/mime.types;
    default_type application/octet-stream;

    # DEPRECATED - This will be removed.
    # Define a custom log format for tracking TLS information.
    log_format custom_ssl '$remote_addr [$time_local] '
                          '$scheme $status $ssl_session_reused $ssl_protocol $ssl_cipher $http_host '
                          '"$http_user_agent"';

    # DEPRECATED - This will be removed.
    # Define a custom log format to track the request response times.
    log_format timed_combined '$remote_addr [$time_local] '
                              '$request_time $upstream_response_time $pipe '
                              '$status $body_bytes_sent $scheme $http_host "$request"';

    # Define a custom log formatted as a JSON object. This log contains data
    # not found in the standard access log, including TLS and timing information.
    log_format wsu_combined_json '{ "@timestamp": "$time_iso8601",'
                                 '"scheme": "$scheme",'
                                 '"domain": "$http_host",'
                                 '"url": "$uri",'
                                 '"client": "$remote_addr",'
                                 '"status": "$status",'
                                 '"size": $body_bytes_sent,'
                                 '"responsetime": $request_time,'
                                 '"sslprotocol": "$ssl_protocol",'
                                 '"cipher": "$ssl_cipher",'
                                 '"request": "$request",'
                                 '"method": "$request_method",'
                                 '"http_referrer": "$http_referer",'
                                 '"http_user_agent": "$http_user_agent"'
                                 '}';

    # Standard access log file.
    access_log  /var/log/nginx/access.log;

    # Combined log file stored in JSON format for external parsing.
    access_log  /var/log/nginx/wsu-combined-access.json wsu_combined_json;

    # Sendfile should be off in a VirtualBox (local) environment because
    # of caching issues with the shared drive. In production, it should
    # be turned on as it does improve performance.
    {% if 'remote' == salt['pillar.get']('network:location', 'local') %}
    sendfile            on;
    {% else %}
    sendfile            off;
    {% endif %}

    # When a server serves many domain names, the hash table needs to grow
    # so that Nginx can handle lookups quickly. Our default is 256 and a
    # server needing more can specify a value in pillar data.
    server_names_hash_max_size {{ salt['pillar.get']('nginx-config:server_names_hash_max_size', '256') }};

    # Don't send out partial TCP frames
    tcp_nopush          on;

    # How long each connection should stay idle.
    keepalive_timeout   30s;

    # The number of requests that can be served through a connection.
    keepalive_requests 1000;

    # Hide nginx version information
    server_tokens       off;

    # Enable Gzip compression
    gzip          on;

    # Compression level (1-9)
    gzip_comp_level     5;

    # Don't compress anything under 256 bytes
    gzip_min_length     256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress output of these MIME-types
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;
      # text/html is always compressed by HttpGzipModule

    # Disable gzip for bad browsers
    gzip_disable  "MSIE [1-6]\.(?!.*SV1)";

    # Upstream to abstract backend connection(s) for PHP.
    upstream php {
        server unix:/var/run/php5-fpm.sock;
    }

    # If the requested body size is more than the buffer size, the entire body is
    # written to a temporary file. Default is 8k or 16k depending on the platform.
    client_body_buffer_size 16k;

    # If a request line or header field does not fit into this buffer, then larger
    # buffers via large_client_header_buffers are allocated
    client_header_buffer_size 1k;

    # Max size of a body to allow. This affects uploads, but can be overwritten at
    # the individual site level
    client_max_body_size 50M;

    # The maximum number and size of large headers to accept from a client
    large_client_header_buffers 4 16k;

    map $embed_request $x_frame_option {
        default SAMEORIGIN;
        1       ALLOWALL;
    }

    # Per https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    #
    # Prevents IE and Google Chrome from MIME-sniffing a response away from the declared
    # content-type.
    add_header X-Content-Type-Options nosniff;

    # Enable the XSS filter built into modern web browsers. This will re-enable
    # the XSS filter if a user has disabled it.
    add_header X-XSS-Protection "1; mode=block";

    # Ensure that content served from this server is not embedded in other pages
    # unless they are of the same origin.
    add_header X-Frame-Options SAMEORIGIN;

    map $request_method $test_cache_header {
        POST skip;
    }

    map $query_string $test_cache_header {
        .+ skip;
    }

    map $request_uri $test_cache_header {
        ~*/wp-admin/ skip;
    }

    map $http_cookie $test_cache_header {
        ~*wp skip;
        ~*wordpress skiip;
    }

    # Include request limiting configuration.
    include /etc/nginx/wsu-nginx-limit-req.conf;

    fastcgi_cache_path /etc/nginx/cache levels=1:2 keys_zone=WSUWP:100m inactive=20m;
    fastcgi_cache_key "$server_protocol$scheme$request_method$host$request_uri";

    include /etc/nginx/sites-enabled/*;
}
